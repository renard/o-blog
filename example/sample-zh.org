#+TITLE: o-blog
#+DESCRIPTION: 使用 org-mode 的独立博客系统
#+DATE:

#+STARTUP: logdone

#+TEMPLATE_DIR: ../templates
#+LANGUAGE: zh-CN
#+STYLE: style
#+URL: http://exaos.github.com/o-blog

#+DEFAULT_CATEGORY: Tips
#+DISQUS: exaos-o-blog

#+NAME: my-sanitizer
#+begin_src emacs-lisp
(defun el-sanitizer(s)
  "Sanitize string S"
  (if (eq (ob-sanitize-string s) "")
      (md5 s)
    (ob-sanitize-string s)))
#+end_src

#+CALL: my-sanitizer()
#+FILENAME_SANITIZER: md5

#+POST_BUILD_SHELL: cmd 1
#+POST_BUILD_SHELL: cmd 2
#+POST_BUILD_SHELL: cmd 3
#+POST_BUILD_SHELL: cmd 4

* 快速入门指南
  :PROPERTIES:
  :PAGE:     index.html
  :END:

#+begin_o_blog_row 8

#+HTML: <div class="hero-unit">

#+HTML: <h1>o-blog</h1>

使用 [[http://orgmode.org/][org-mode]] 的独立博客系统。

#+HTML: </div>

#+o_blog_row_column 4

#+HTML: <div class="hero-unit" style="font-size: 200%;">

[[file:{lisp}(ob:path-to-root){/lisp}/features.html][/icon-cog icon-white/ 特性]]

[[https://github.com/renard/o-blog][/icon-github-sign icon-white/ 源代码 (github)]]

[[file:{lisp}(ob:path-to-root){/lisp}/changelog.html][/icon-pencil icon-white/ 更新记录]]

[[file:{lisp}(ob:path-to-root){/lisp}/bug-report.html][/icon-fire icon-white/ Bug report]]


#+HTML: </div>

#+end_o_blog_row


** 设置

首先，你需要安装有 [[http://www.gnu.org/s/emacs][emacs]] (在版本 23 下测试，在 24 下可能也行) 和 [[http://orgmode.org/][org-mode]] (版本 7.8 或更高)。然后你有两种方法可以安装 [[https://github.com/renard/o-blog][o-blog]].

#+begin_o_blog_row 5

*使用 el-get*

要使用 [[https://github.com/dimitri/el-get][el-get]], 安装起来很容易。你所要做的不过是将 =o-blog= 添加到
=el-get-sources= 中，然后执行 =M-x el-get-install o-blog=.

如果你使用 =el-get= 4 或更高，你只需要执行: =M-x el-get-install o-blog=.

#+o_blog_row_column 6

*手动安装*

首先从 [[http://github.com][Github]] 克隆 /git/ 仓库源码。

#+begin_src bash
cd ~/.emacs.d
git clone https://github.com/renard/o-blog.git
#+end_src

将如下内容添加到你的 =~/.emacs.d/init.el= 文件中:

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/o-blog")
  (require 'o-blog)
#+end_src

#+end_o_blog_row


** 发布博文
打开文件 =~/.emacs.d/o-blog/example/sample.org= 然后执行 =M-x
org-publish-blog=. 输出的站点默认保存在 =~/.emacs.d/o-blog/out=.

详情参见 [[file:blog/index.html][博文]]。

* 博客设置
** 版权
  :PROPERTIES:
  :SNIPPET:  t
  :END:

Copyright © 2008-2012 [[mailto:seb%2520%E2%9D%A8%C9%91%C6%A6%C9%B5%CF%90%C9%91%CA%82%C9%9B%E2%9D%A9%2520chezwam%2520%E2%9D%A8%C6%A4%C9%B5%C9%A9%C9%B2%CA%88%E2%9D%A9%2520org][Sébastien Gross]]. Published under the therm of the
[[http://creativecommons.org/licenses/by-nc-sa/2.0/fr/][Creative Commons Attribution-Noncommercial-Share Alike 2.0 France License]].

** 关于
  :PROPERTIES:
  :SNIPPET:  t
  :END:

这是个解释 [[https://github.com/renard/o-blog][o-blog]] 工作机理的博客样例。

** 导航
  :PROPERTIES:
  :SNIPPET:  t
  :END:

- [[file:{lisp}(ob:path-to-root){/lisp}/features.html][/icon-cog icon-white/ 特性]]

- [[#][/icon-book icon-white/ 文档]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/templates.html][模版]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/structures.html][文档结构]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/functions.html][函数]]
  -
  - [[file:{lisp}(ob:path-to-root){/lisp}/faq.html][FAQ]]

- [[#][/icon-file icon-white/ 近期博文]]
  - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Tips"%200))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 0)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 1))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 1)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 2))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 2)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 3))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 3)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 4))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 4)){/lisp}]]

- [[file:{lisp}(ob:path-to-root){/lisp}/tags/index.html][/icon-tags icon-white/ 标签]]

- [[file:{lisp}(ob:path-to-root){/lisp}/archives.html][/icon-list icon-white/ 归档]]

- [[file:{lisp}(ob:path-to-root){/lisp}/index.xml][RSS]]

- [[file:{lisp}(ob:path-to-root){/lisp}/changelog.html][/icon-pencil icon-white/ 更新记录]]

- [[file:{lisp}(ob:path-to-root){/lisp}/debug.html][(调试)]]

* 更新记录
  :PROPERTIES:
  :PAGE:     changelog.html
  :END:

- 2012-04-07
  - 添加多语言模版支持

- 2012-03-28
  - Add support for [[http://en.wikipedia.org/wiki/QR_code][QR-code]].

- 2012-03-21
  - 合并上述代码，更新中文演示模版，修改 snippet 为中文。
  - 添加 Disqus 中文讨论。

- 2012-03-20
  - Add [[http://disqus.com][Disqus]] support.
  - User can select the file name sanitizer function.
  - Add [[file:{lisp}(ob:path-to-root){/lisp}/bug-report.html][bug report howto]].

- 2012-03-19
  - 使用 MD5SUM 作为 tags-safe 及 post filename, 解决中文名称的问题 (exaos)

- 2012-03-06
  - Add support for Font-Awesome

- 2012-02-28
  - Switched to bootstrap 2.0.1
  - Switched to lesscss 1.2.2

- 2012-01-23
  - Change tag system from "Tags" to org tagging system.

* 文档
** 调试
   :PROPERTIES:
   :PAGE:     debug.html
   :TEMPLATE: debug.html
   :END:


** 特性
  :PROPERTIES:
  :PAGE:     features.html
  :END:

- 外观
  - 带[[file:{lisp}(ob:path-to-root){/lisp}/debug.html][调试功能]]的动态模版系统 (使用 lisp 函数), 方便嵌入 [[file:{lisp}(ob:path-to-root){/lisp}/bug-report.html][错误报告工具]]
  - 输出的代码片断带有语法加亮
  - 支持 [[http://twitter.github.com/bootstrap/][bootstrap]]
  - 支持 [[http://fortaweso.me/font-awesome/][Font-Awesome]]
  - 支持 [[http://lesscss.org/][lesscss]]
  - 支持 [[http://jquery.com/][JQuery]]
  - 支持 HTML5 / CSS3
- 博客
  - 静态页面 
  - [[file:{lisp}(ob:path-to-root){/lisp}/tags/index.html][云标签]]
  - 多个博客
  - [[file:{lisp}(ob:path-to-root){/lisp}/archives.html][博文归档]]
  - 支持 [[http://disqus.com][Disqus]]
  - 支持 [[http://en.wikipedia.org/wiki/QR_code][QR code]]
- 博文发布
  - 同时支持同步与异步发布
  - 直接发布到网站服务器上 (通过 tramp)
- [[http://twitter.github.com/bootstrap/][Bootstrap]] 额外功能
  - 警告框
  - 支持图标 ([[http://glyphicons.com/][glyphicons]])

** 模版
  :PROPERTIES:
  :PAGE:     templates.html
  :END:

在 [[https://github.com/renard/o-blog][o-blog]] 导出过程中占重头戏的是模版，一组 HTML 的文件。可解析的 Lisp 源码以
=<lisp>= 标签嵌入其中。

#+begin_src html
<h1><lisp>(ob:blog-title BLOG)</lisp></h1>
#+end_src

上面的代码片断可导出为如下类似的内容：

#+begin_src html
<h1>o-blog</h1>
#+end_src

#+begin_o_blog_alert info Information
如果不需要其它模版, [[https://github.com/renard/o-blog][o-blog]] 只用以 =blog_= 打头的模版文件就够了（通过函数
=ob:insert-template= ）。

所有其它的模版只是为了方便而定义。
#+end_o_blog_alert


*** 必要的模版

=blog_= 打头的模版。

 - =blog_static.html=: 导出任何静态页面 (函数 =ob-write-static=).
 - =blog_post.html=: 导出一篇博文 (函数 =ob-write-posts=).
 - =blog_tags.html=: 导出云标签页面 (函数 =ob-write-tags=).
 - =blog_tags-detail.html=: 导出匹配特定标签的页面 (函数 =ob-write-tags=).
 - =blog_archive.html=: 导出全部归档 (所有类别、所有年、所有月) 页面 (函数 =ob-write-index=).
 - =blog_rss.html=: 导出 RSS 订阅 (函数 =ob-write-index=).
 - =blog_index_month.html= 导出指定月的索引页面 (函数 =ob-write-index=).
 - =blog_index_year.html= 导出指定月的索引页面 (函数 =ob-write-index=).
 - =blog_index_catery.html= 导出指定类别的索引页面 (函数 =ob-write-index=).

*** 索引模版

以 =index_= 打头的模版。它们使用所有的 =blog_index_*.html= 模版来生成一组匹配指定类别、年、月和全部归档的文章列表。

 - =index_archives.html=
 - =index_category.html=
 - =index_month.html=
 - =index_year.html=

*** 导航模版

以 =nav_= 开头的模版用于生成导航片断：

 - =nav_links.html=: 用于生成用于页首和页尾的的导航菜单。
 - =nav_tag-cloud.html=: 用于生成页尾的云标签。

*** 页面模版

以 =page_= 开头的模版用于生成 HTML 的页头及页尾。


** 结构
  :PROPERTIES:
  :PAGE:     structures.html
  :END:

Some variables are available when publishing lisp parts of templates. These
variables are defined using [[http://www.gnu.org/software/emacs/manual/html_node/cl/Structures.html][defstruct]], then any slot (or property) is
available using a =(type-slot variable)= form.

*** 文档结构

**** Structures: =ob:blog=

Structure used to define a blog:

 - =file=: the blog source file (read-only).
 - =buffer=: buffer visiting the blog file (read-only).
 - =publish-dir=: where to publish the blog defined by the =#+PUBLISH_DIR:=
   header directive or =out= in the same directory as the blog source file.
 - =template-dir=: location of the template directory defined by the
   =#+TEMPLATE_DIR:= header directive or the =templates= directory of the
   =o-blog= library.
 - =style-dir=: path of the /css/ files defined by the =#STYLE_DIR:= header
   directive or =style=. This directory is relative to =template-dir=.
 - =posts-filter=: default filter for post defined by the =#POSTS_FILTER:=
   header directive or =+TODO={DONE}=.
 - =static-filter=: default filter for static pages defined by the
   =#STATIC_FILTER:= header directive or =+PAGES={.*}=.
 - =snippet-filter=  default filter for snippets defined by the
   =#SNIPPET_FILTER:= header directive or =+SNIPPET={.*}=.
 - =title=: Blog title defined by the =#+TITLE:= header directive.
 - =description=: blog description defined by the =#+DESCRIPTION:= header
   directive.
 - =url=: Blog base URL defined by the =#+URL:= header.
 - =default-category=: default category for posts  defined by the
   =#DEFAULT_CATEGORY:= header or =Blog=.

Example:

#+begin_src emacs-lisp
;; get the title of the current blog defined in variable BLOG.
(ob:blog-title BLOG)
#+end_src

**** Structures: =ob:post=

 - =id=: the post numerical id. Posts are sort by reversed chronological
   order. The most recent post get the id 0.
 - =title=: the post title read from the entry title.
 - =timestamp=: the post timestamp given by the =CLOSED= property or the
   current time.
 - =year=: numerical year computed from =timestamp=.
 - =month=: numerical month computed from =timestamp=.
 - =day=: numerical day computed from =timestamp=.
 - =category=: category read from =CATEGORY= property org =blog=.
 - =tags=: list of =ob:tags=.
 - =template=: template to use for current post read from =TEMPLATE=
   property or =blog_post.html=.
 - =filepath=: relative path from the blog root directory to the post
   directory (directory only).
 - =filename=: sanitized filename generated from =title=.
 - =htmlfile=: full relative path to the post html file (file and
   directory).
 - =path-to-root=: relative path from the post html file to the blog root.
 - =content=: raw content of the post (org-mode format).
 - =content-html=: HTML export of the post.

Example:

#+begin_src emacs-lisp
;; get the HTML content of the post defined in variable POST.
(ob:post-content-html POST)
#+end_src

**** Structures: =ob:tags=

Structure used to define a tag:

 - =name=: string defying the tag name.
 - =safe=: web safe tag name for URL.
 - =count=: how many time the tag is used.
 - =size=: the font size in percent.

Example:

#+begin_src emacs-lisp
;; get the name of the tag defined in variable TAG.
(ob:tags-name TAG)
#+end_src

*** 变量

Following variables are always available when publishing a blog:

 - =BLOG= (=ob:blog=): information about the blog being published.
 - =POSTS= (list of =ob:post=): list of all posts of the blog or restricted
   list of posts (depending what is exported).
 - =ALL-POSTS=: A copy of =POSTS= except this *always* contents all the
   posts from the blog.
 - =STATIC= (list of =ob:post=): list of static pages.
 - =SNIPPETS= (list of =ob:post=): list of snippets pages.
 - =TAGS= (list of =ob:tags=): list of all tags.

Some variables may be defined in some functions:

 - =POST= (=ob:post=): post (or static page) being currently published.
 - =TAG= (=ob:tags=): tag being currently published.
 - =CATEGORY= (=string=): the category being published.
 - =YEAR=, =MONTH (=integer=): the year and month being published.
 - =PATH-TO-ROOT= (=string=): (intern use only, use =ob:path-to-root=
   instead) path to blog root used by =ob:path-to-root=.

** 函数
  :PROPERTIES:
  :PAGE:     functions.html
  :END:

Basically any lisp function could be used withing a blog template as long as
they are known when exporting. Meanwhile some of them are specifically made
to be used withing templates. These functions are prefixed by =ob:=.

Descriptions are taken from function docstrings.

*** Function: =(ob:get-posts &optional PREDICATE COUNT SORTFUNC COLLECT)=

Return posts (from =POSTS= as defined in =org-publish-blog=) matching
=PREDICATE=. Limit to =COUNT= results if defined and sorted using
=SORTFUNC=.

=PREDICATE= is a function run for each post with the post itself as
argument. If =PREDICATE= is nil, no filter would be done on posts.

=SORTFUNC= is used a =sort= =PREDICATE=.

If =COLLECT= is defined, only returns the =COLLECT= field of a
=ob:post= structure.

Examples:

Getting last 10 posts:

#+begin_src emacs-lisp
   (ob:get-posts nil 10)
#+end_src


Getting post from January 2012:

#+begin_src emacs-lisp
   (ob:get-posts
      (lambda (x)
         (and (= 2012 (ob:post-year x))
              (= 1 (ob:post-month x)))))
#+end_src

Getting all categories:

#+begin_src emacs-lisp
    (ob:get-posts nil nil nil 'category)
#+end_src


**** Template usages

For archive navigation:

#+begin_src html
  <nav id="archives">
    <h1>Archives</h1>
    <ul>
      <lisp>
        (loop for p in (ob:get-posts nil 10)
              do (insert (format "<li><a href=\"%s/%s\">%s</a></li> "
                                 (ob:path-to-root)
                                 (ob:post-htmlfile p)
                                 (ob:post-title p))))
      </lisp>
    </ul>
  </nav>
#+end_src

*** Function: =(ob:get-post-by-id ID)=

Return post which id is =ID=.

**** Template usages

Posts navigation:

#+begin_src html
  <nav class="articles-nav">
    <ul>
      <lisp>
        (progn
          ;; Get previous post
          (let ((ppost (ob:get-post-by-id (1+ (ob:post-id POST)))))
            (if ppost
                (insert (format "<li class=\"prev\"><a href=\"%s/%s\">%s</a></li>"
                                (ob:path-to-root)
                                (ob:post-htmlfile ppost)
                                (ob:post-title ppost)))
              (insert "<li>&nbsp;</li>")))
          ;; Get next post
          (let ((npost (ob:get-post-by-id (1- (ob:post-id POST)))))
            (if npost
                (insert (format "<li class=\"next\"><a href=\"%s/%s\">%s</a></li>"
                                (ob:path-to-root)
                                (ob:post-htmlfile npost)
                                (ob:post-title npost)))
              (insert "<li>&nbsp;</li>"))))
      </lisp>
    </ul>
  </nav>
#+end_src

*** Function: =(ob:get-snippet NAME)=

Get first snippet matching =NAME=.

**** Template usages

Insert the /About/ section in page footer:

#+begin_src html
  <h1>About</h1>
  <address>
    <lisp>(ob:post-content-html (ob:get-snippet "About"))</lisp>
  </address>
#+end_src

*** Function: =(ob:get-header HEADER &optional ALL)=

Get =HEADER= from blog buffer as defined in =BLOG= global context variable.

Returns only fist match except if =ALL= is defined.

**** Template usages

Get the last updated header for rss export:

#+begin_src html
  <updated><lisp>(ob:format-date (ob:get-header "DATE"))</lisp></updated>
#+end_src

*** Function: =(ob:insert-template TEMPLATE)=

Insert =TEMPLATE= in current buffer.

**** Template usages

Insert html header:

#+begin_src html
  <lisp>(ob:insert-template "page_header.html")</lisp>
#+end_src

*** Function: =(ob:format-date DATE &optional FORMAT LOCALE)=

Format =DATE= using =FORMAT= and =LOCALE=.

=DATE= can heither be string suitable for =parse-time-string= or a list of
interger using =current-time= format.

=FORMAT= is a =format-time-string= compatible definition. If not
set ISO8601 =%Y-%m-%dT%TZ= format would be used.

**** Template usages

Add a human readable timestamp for a post:

#+begin_src html
  Posted on <time datetime="<lisp> (ob:format-date (ob:post-timestamp POST)) </lisp>">
    <lisp> (ob:format-date (ob:post-timestamp POST) "%A %B, %d %Y at %H:%M:%S") </lisp>
  </time>.
#+end_src

** 报告软件臭虫 (BUG)
  :PROPERTIES:
  :PAGE:     bug-report.html
  :END:

To report a bug please be sure your issue is =o-blog= related.

You can bootstrap a simple clean environment

#+begin_src sh
rm -rf ~/dev/.emacs.d
mkdir -p ~/dev/.emacs.d
cd ~/dev/.emacs.d
git clone git://github.com/renard/o-blog.git
git clone git://orgmode.org/org-mode.git
#+end_src


Then launch =emacs=:

#+begin_src sh
  cd ~/dev
  rm -rf .emacs.d/o-blog/example/out
  emacs --debug-init -Q  -l .emacs.d/o-blog/sample-init.el --eval \
      '(progn (setq browse-url-generic-program "x-www-browser"
        browse-url-browser-function (quote browse-url-generic))
        (ob-build-sample))'
#+end_src

You can change =x-www-browser= to your favorite browser.

If anything runs fine emacs would exit normally. Otherwise a buffer called
=o-blog Bug-report= is created and its content is copied to primary X
selection (if available). This buffer contains useful information for
debugging your issue. A browser is launch to the [[https://github.com/renard/o-blog/issues/new][o-blog new issue page]]. You
can either paste content of the =o-blog Bug-report= buffer or the X primary
selection (middle click).

Please describe as much as possible your issue (in English). do no hesitate
to paste your blog file to https://gist.github.com/ this might be useful to
debug.



** 问答
  :PROPERTIES:
  :PAGE:     faq.html
  :END:

*** 页面看起来丑丑的～～

Maybe you are using [[https://www.google.com/chrome/][google-chrome]] and try to view your site locally using a
=file:///path/to/your/site/out/index.html= scheme. Open the javascript console
=Ctrl+Shift+I= you should see something like:

如果你使用的是 [[https://www.google.com/chrome/][google-chrome]] 并且用 =file:///path/to/your/site/out/index.html= 这
种方式来查看页面的话，用 =Ctrl+Shift+I= 打开 JavaScript 控制台，你可能会看到如下
类似的提示：

#+begin_example
XMLHttpRequest cannot load file:///path/to/your/site/out/out/style/css/o-blog.less. Cross origin requests are only supported for HTTP.
less-1.2.1.min.js:8Uncaught Error: NETWORK_ERR: XMLHttpRequest Exception 101
#+end_example

这是 Chrome 载入本地 JavaScript 文件时的一个特点，这也是 Chrome 中的一个
/安全特性/ 。

You can disable this with the =--allow-file-access-from-files= option to
chrome or you can use an other browser or setup a local webserver.

There are many complex solutions for a webserver such as [[http://nginx.org/][nginx]] or [[http://httpd.apache.org/][Apache]] or
many [[http://en.wikipedia.org/wiki/Comparison_of_web_server_software][others]].

You may want to prefer a lighter and simpler solution.

With python simply run:

#+begin_src sh
cd /path/to/your/site && python -m SimpleHTTPServer
#+end_src

And browse http://localhost:8000

Or within emacs you can run [[https://github.com/jrhbailey/emacs-http-server][emacs-http-server]]:

#+begin_src emacs-lisp
(require 'httpd)
(setq httpd-root "/path/to/your/site")
(httpd-start)
#+end_src

and browse http://localhost:8080

An other alternative would be the use of [[http://www.emacswiki.org/emacs/Elnode][elnode]] but it seems to be more
complex.

* 博客条目
** DONE 创建一个博客条目					  :用例:o@blog:
  CLOSED: [2012-01-07 Sat 00:13]
   :PROPERTIES:
   :CUSTOM_ID: create-new-post
   :END:

A blog consists of org entries. Each entry has a title, some properties and
some text. Exporting a blog means publishing all entries with a =DONE=
=TODO=.

A minimal blog file could be something like:

#+begin_src org

  ,#+TITLE: Lorem ipsum
  ,#+DESCRIPTION: dolor sit amet
  ,#+DATE:

  ,#+STARTUP: logdone

  ,#+URL: http://blog.example.com

  ,* DONE Lorem ipsum
  ,  CLOSED: [2012-01-07 Sat 00:13]
  ,  :PROPERTIES:
  ,  :tags:     Lorem
  ,  :END:

  ,  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
  ,  tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt
  ,  et, mattis eget, convallis nec, purus. Cum sociis natoque penatibus et
  ,  magnis dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec
  ,  vitae dolor. Nullam tristique diam non turpis. Cras placerat accumsan
  ,  nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_src

Please note the blank line between the properties section and the text itself.

Use =#+STARTUP: logdone= to automatically add a time stamp when closing an
entry.

** DONE 如何使用标签						  :用例:o@blog:
  CLOSED: [2012-01-07 Sat 00:28]
   :PROPERTIES:
   :CUSTOM_ID: use-tags
   :END:

Tags are useful to classify articles. They are stored as [[http://orgmode.org/manual/Tags.html][org-mode tags]] for
each entries. To add or modify a tag for a post, just use =C-c C-c= and
enter the tag value.

If an article has more than one tag, separate them by a colon (=:=).

Special characters used in tags:

  - At sign (=@=) is converted to a dash (=-=).
  - Underscore (=_=) is converted to a blank (= =).

** DONE 一些 org 语法示例 					     :用例:org:
   CLOSED: [2012-01-07 Sat 11:23]
   :PROPERTIES:
   :CUSTOM_ID: syntax-org-mode
   :END:

*** Titles

This is a level 1

**** Level 2

This is a level 2


***** Level 3

This is a level 3

****** Level 4

This is a level 4

******* Level 5

This is a level 5

******** Level 6

This is a level 6


Up to 6 levels of indentation could be used.

*** Praragaphs

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+html: <div class="two-cols">

Nullam eu ante vel est convallis dignissim. Fusce suscipit, wisi nec
facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis
odio. Nunc porta vulputate tellus. Nunc rutrum turpis sed pede. Sed
bibendum. Aliquam posuere. Nunc aliquet, augue nec adipiscing interdum,
lacus tellus malesuada massa, quis varius mi purus non odio. Pellentesque
condimentum, magna ut suscipit hendrerit, ipsum augue ornare nulla, non
luctus diam neque sit amet urna. Curabitur vulputate vestibulum lorem. Fusce
sagittis, libero non molestie mollis, magna orci ultrices dolor, at
vulputate neque nulla lacinia eros. Sed id ligula quis est convallis
tempor. Curabitur lacinia pulvinar nibh. Nam a sapien.

Pellentesque dapibus suscipit ligula. Donec posuere augue in quam. Etiam vel
tortor sodales tellus ultricies commodo. Suspendisse potenti. Aenean in sem
ac leo mollis blandit. Donec neque quam, dignissim in, mollis nec, sagittis
eu, wisi. Phasellus lacus. Etiam laoreet quam sed arcu. Phasellus at dui in
ligula mollis ultricies. Integer placerat tristique nisl. Praesent
augue. Fusce commodo. Vestibulum convallis, lorem a tempus semper, dui dui
euismod elit, vitae placerat urna tortor vitae lacus. Nullam libero mauris,
consequat quis, varius et, dictum id, arcu. Mauris mollis tincidunt
felis. Aliquam feugiat tellus ut neque. Nulla facilisis, risus a rhoncus
fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.

#+html: </div>


#+begin_verse
Great clouds overhead
Tiny black birds rise and fall
Snow covers Emacs

-- AlexSchroeder
#+end_verse

#+begin_quote
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+end_quote

#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER

*** Lists

As taken from org manual:

My favorite scenes are (in this order)
        1. The attack of the Rohirrim
        2. Eowyn's fight with the witch king
           + this was already my favorite scene in the book
           + I really like Miranda Otto.
        3. Peter Jackson being shot by Legolas
           - on DVD only
           He makes a really funny face when it happens.
But in the end, no individual scenes matter but the film as a whole.
Important actors in this film are:
        - Elijah Wood :: He plays Frodo
        - Sean Austin :: He plays Sam, Frodo's friend.  I still remember
          him very well from his role as Mikey Walsh in The Goonies.

*** Footnotes

The Org homepage[fn:1] now looks a lot better than it used to.

[fn:1] The link is: http://orgmode.org

*** Emphasis and monospace

You can make words *bold*, /italic/, _underlined_, =code= and ~verbatim~,
and, if you must, ‘+strike-through+’. Text in the code and verbatim string
is not processed for Org mode specific syntax; it is exported verbatim.

*** Horizontal rules

A line consisting of only dashes, and at least 5 of them, will be exported
as a horizontal line (‘<hr/>’ in HTML and \hrule in LaTeX).

------

As shown previously.

*** Comment lines

Lines starting with ‘#’ in column zero are treated as comments and will
never be exported. If you want an indented line to be treated as a comment,
start it with ‘#+ ’. Also entire subtrees starting with the word ‘COMMENT’
will never be exported. Finally, regions surrounded by ‘#+BEGIN\_COMMENT’
... ‘#+END\_COMMENT’ will not be exported.

#+begin_comment
C-c ;
Toggle the COMMENT keyword at the beginning of an entry.
#+end_comment

*** Images and Tables

Table

#+CAPTION: This is the caption for the next table (or link)
#+LABEL:   tbl:basic-data
|----------+----------+----------+----------+----------------------------------------------------------------------|
| Header 1 | Header 2 | Header 3 | Header 4 | Header 5                                                             |
|----------+----------+----------+----------+----------------------------------------------------------------------|
|      1.1 |      1.2 |      1.3 | X        | This /cell/ has a *very* =long= ~line~ _with_  _{special} ^{layouts} |
|      2.1 |      2.2 |      3.3 | Y        |                                                                      |
|----------+----------+----------+----------+----------------------------------------------------------------------|
|      3.1 |      3.1 |      C.1 | D.1      | E.1                                                                  |
|----------+----------+----------+----------+----------------------------------------------------------------------|


Image

#+CAPTION: This is the caption for the next figure link (or table)
#+LABEL:   fig:SED-HR4049
[[file:200px-Org-mode-unicorn.svg.png][file:org-mode-unicorn.png]]

*** Literal examples

#+BEGIN_EXAMPLE
Some example from a text file.
#+END_EXAMPLE


Here is an example
        : Some example from a text file.

#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
    "Exclusive or."
    (if a (not b) b))
#+END_SRC

#+BEGIN_SRC emacs-lisp -n -r
  (save-excursion                  (ref:sc)
     (goto-char (point-min)))       (ref:jump)
#+END_SRC

In line [[(sc)]] we remember the current position.  [[(jump)][Line (jump)]]
jumps to point-min.

*** Special symbols

Angles are written as Greek letters \alpha, \beta and \gamma.

*** Subscripts and superscripts

The mass of the sun is M_sun = 1.989 x 10^30 kg.  The radius of
the sun is R_{sun} = 6.96 x 10^8 m.

*** links

- outsite (page): [[https://github.com/renard/o-blog][/o-blog/ home]].
- [[Creating a blog]]
- insite (file): [[file:o-blog.el]]
- in page (anchor): [[Literal examples]]
** DONE 一些 HTML5 示例						     :html_5:
   CLOSED: [2012-01-10 Tue 20:58]
   :PROPERTIES:
   :CUSTOM_ID: html5-example
   :END:

*** tag: <details>

Works only with chrome.

#+HTML: <details>
#+HTML: <summary>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</summary>
- Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
- Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.
- Sed diam.
- Nam vestibulum accumsan nisl.
#+HTML: </details>

#+begin_src org
  ,#+HTML: <details>
  ,#+HTML: <summary>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</summary>
  ,- Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
  ,- Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.
  ,- Sed diam.
  ,- Nam vestibulum accumsan nisl.
  ,#+HTML: </details>
#+end_src

** DONE 警告 								 :用例:
   CLOSED: [2012-01-15 Sun 20:40]
   :PROPERTIES:
   :CUSTOM_ID: warning
   :END:

Alerts are declared in =o_blog_alert= blocks. There are 4 types of
them:

 - info
 - success
 - warning
 - error

#+begin_src org
  ,#+begin_o_blog_alert <TYPE> <title>
  ,Text of the alert
  ,#+end_o_blog_alert
#+end_src


#+begin_o_blog_alert error

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_o_blog_alert


#+begin_o_blog_alert error Danger

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_o_blog_alert

#+begin_o_blog_alert warning Caution

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_o_blog_alert



#+begin_o_blog_alert success Tip

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_o_blog_alert

#+begin_o_blog_alert info Information

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis
dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae
dolor. Nullam tristique diam non turpis. Cras placerat accumsan
nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

#+end_o_blog_alert

** DONE 使用 modal 显示源代码 				       :用例:Bootstrap:
   CLOSED: [2012-02-09 Thu 23:13]
   :PROPERTIES:
   :CUSTOM_ID: use-modal
   :END:

The [[http://twitter.github.com/bootstrap/javascript.html#modals][Modal]] bootstrap script can be used to display the content of an external
file in a modal window. The magic line is:

#+begin_src org
  ,#+O_BLOG_SOURCE: path/to/file [mode]
#+end_src

The /org template shorcut/ is =<os= =TAB=. Two parameters might be used:
- The mandatory =/path/to/file= which is the path to the file from which
  content should be read.
- The optional =mode= which could be determined by if omitted.

这是显示 =README-zh.md= 文件的示例：

#+o_blog_source ../README-zh.md markdown

这是显示 elisp 代码的示例：

#+o_blog_source ../sample-init.el emacs-lisp

** DONE 添加图标					       :用例:Bootstrap:
   CLOSED: [2012-02-10 Fri 00:19]
   :PROPERTIES:
   :CUSTOM_ID: add-icons
   :END:

Icons from [[http://glyphicons.com/][glyphicons]] are supported support by simply naming the icon using
italic style:

#+begin_o_blog_row 6


*Source example*

#+begin_src org
  ,/icon-calendar/ calendar
#+end_src

#+o_blog_row_column 6

*Rendered output*

/icon-calendar/ calendar

#+end_o_blog_row



This could also be used for the top /navbar/ using something like:

#+begin_o_blog_row 6

*Source example*

#+begin_src org

  ,- [[#][/icon-book icon-white/ Documentation]]
  ,  - [[file:{lisp}(ob:path-to-root){/lisp}/templates.html][Templates]]
  ,  - [[file:{lisp}(ob:path-to-root){/lisp}/structures.html][Structures]]
  ,  - [[file:{lisp}(ob:path-to-root){/lisp}/functions.html][Functions]]
  ,  -
  ,  - [[file:{lisp}(ob:path-to-root){/lisp}/faq.html][FAQ]]

  ,- [[#][/icon-file icon-white/ Blog]]
  ,  - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Tips"%200))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 0)){/lisp}]]
  ,  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 1))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 1)){/lisp}]]
  ,  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 2))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 2)){/lisp}]]
  ,  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 3))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 3)){/lisp}]]
  ,  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 4))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 4)){/lisp}]]

  ,- [[file:{lisp}(ob:path-to-root){/lisp}/tags/index.html][/icon-tags icon-white/ Tags]]

#+end_src

#+o_blog_row_column 6

*Rendered output*


#+begin_html
<div class="navbar">
<div class="navbar-inner">
<div class="container">
<div class="nav-collapse">
#+end_html

- [[#][/icon-book icon-white/ Documentation]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/templates.html][Templates]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/structures.html][Structures]]
  - [[file:{lisp}(ob:path-to-root){/lisp}/functions.html][Functions]]
  -
  - [[file:{lisp}(ob:path-to-root){/lisp}/faq.html][FAQ]]

- [[#][/icon-file icon-white/ Blog]]
  - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Tips"%200))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 0)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 1))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 1)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 2))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 2)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 3))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 3)){/lisp}]]
  - [[file:{lisp}(format "%s/%s" (ob:path-to-root) (ob:post-htmlfile (ob:get-last-post "Tips" 4))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Tips" 4)){/lisp}]]

- [[file:{lisp}(ob:path-to-root){/lisp}/tags/index.html][/icon-tags icon-white/ Tags]]

#+begin_html
</div>
</div>
</div>
</div>
#+end_html

Please note the blank line between menu items. if blanks are omitted, the
rendered result might be damaged.

#+end_o_blog_row


** DONE 使用 Bootstrap 分格 				       :用例:Bootstrap:
   CLOSED: [2012-02-10 Fri 01:19]
   :PROPERTIES:
   :CUSTOM_ID: use-bootstrap
   :END:

[[http://twitter.github.com/bootstrap/scaffolding.html][Bootstrap scaffolding]] could be defined using both =#+begin_o_blog_row= and
=#+end_o_blog_row= directives (or =<og= =TAB= shortcut). A new column could
be started using =#+o_blog_row_column= single directive (or =<ogr= =TAB=
shortcut).


#+begin_o_blog_row 6 0 show-grid
*Example*

#+begin_src org
  ,#+begin_o_blog_row 2 -1 show-grid
  ,Column 1
  ,#+o_blog_row_column 2
  ,Column 2
  ,#+end_o_blog_row
#+end_src


#+o_blog_row_column 6

*Output*

#+begin_o_blog_row 2 -1 show-grid

Column 1

#+o_blog_row_column 2

Column 2

#+end_o_blog_row

#+end_o_blog_row


The syntax is:

#+begin_src org
  ,#+begin_o_blog_row SPAN OFFSET GRID-CLASS
  ,Column 1
  ,#+o_blog_row_column SPAN OFFSET
  ,Column 2
  ,...
  ,#+o_blog_row_column SPAN OFFSET
  ,Column n
  ,#+end_o_blog_row

#+end_src

** DONE 中文测试 							 :中文:
   CLOSED: [2012-03-20 二 09:46]
   - State "DONE"       from ""           [2012-03-20 二 09:46]
   - State "DONE"       from ""           [2012-03-20 二 02:19]
   :PROPERTIES:
   :CUSTOM_ID: use-chinese
   :END:

这是一个测试条目哟。

博客页面的文件名默认使用 =ob-sanitize-string= 从标题生成, 这样会导致中文标题的博文无法正常生成。因此，对于中文博客，需要在你的 *org* 文档头中添加
: #+FILENAME_SANITIZER: md5

另外的一个办法就是在文件头添加一段你自己定义的 =emacs-lisp= 代码，比如：
#+begin_example
#+NAME: my-sanitizer
#+begin_src emacs-lisp
(defun el-sanitizer(s)
  "Sanitize string S"
  (if (eq (ob-sanitize-string s) "")
      (md5 s)
    (ob-sanitize-string s)))
#+end_src

#+CALL: my-sanitizer()
#+FILENAME_SANITIZER: el-sanitizer
#+end_example

- 待办事项
  这儿列举了一些中文处理中的问题。具体的解决参见 [[github:exaos/o-blog]].

  1. [X] 中文文件名无法正常生成
     * 现在，使用 =#+FILENAME_SANITIZER: md5= 生成默认为 =YYYY/MM/DD_(MD5).html= 的文件名。
     * 或者在每个条目下添加属性 =CUSTOM_ID=, 生成为 =YYYY/MM/DD_(CUSTOM_ID).html= 形式的文件名。
  2. [X] 博客设置中的 =Copyright=, =About= 及 =Navigation= 等 =SNIPPET= 不能用中文的问题。
  3. [X] 多语言模版支持。你需要在文件头中定义 =#+LANGUAGE: zh=, 然后在 =templates/zh= 目录下放置需要翻译成中文的模版文件即可

